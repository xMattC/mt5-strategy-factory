#include <MyLibs/Orders/EntryOrders.mqh>
#include <MyLibs/Orders/ExitOrders.mqh>
#include <MyLibs/Utils/Enums.mqh>
#include <MyLibs/Utils/MarketDataUtils.mqh>
EntryOrders entry_orders;
ExitOrders exit_orders;
MarketDataUtils m_utils;
//---
input LOT_MODE  inp_lot_mode    = LOT_MODE_PCT_RISK;    // Lot Size Mode
input double    inp_lot_var     = 2;                    // Lot Size Var
input SL_MODE   inp_sl_mode     = SL_ATR_MULTIPLE;      // Stop-loss Mode
input double    inp_sl_var      = 1.5;                  // Stop-loss Var
input TP_MODE   inp_tp_mode     = TP_ATR_MULTIPLE;      // Take-profit Mode
input double    inp_tp_var      = 1;                    // Take-Profit Var
string lot_mode = EnumToString(inp_lot_mode);
string sl_mode  = EnumToString(inp_sl_mode);
string tp_mode  = EnumToString(inp_tp_mode);
input group "-----------------------------------------"
{% for line in trigger_input_lines %}
{{ line }}
{% endfor %}

int indicator_handle;

int OnInit(){
    {% if trigger_custom %}
        indicator_handle = iCustom(_Symbol, PERIOD_CURRENT, "{{ indicator_path }}"{% for input in trigger_inputs %}, {{ input }}{% endfor %});
    {% else %}
        indicator_handle = {{ function }}(_Symbol, PERIOD_CURRENT{% for input in trigger_inputs %}, {{ input }}{% endfor %});
    {% endif %}
    }
    resource_manager.register_handle(indicator_handle);

    EventSetTimer(60);
    return(INIT_SUCCEEDED);
}

void OnDeinit(const int reason){
    EventKillTimer();
    resource_manager.release_all_handles();
}

void OnTimer(){
    run_trading_logic(_Symbol, indicator_handle);
}

void run_trading_logic(string symbol, int indicator_handle){

    if (!m_utils.is_new_bar(symbol, PERIOD_CURRENT, "00:05")) return;

    bool entry_long, entry_short;
    test_entry_signal(indicator_handle, entry_long, entry_short);

    bool long_in  = entry_long;
    bool short_in = entry_short;
    bool long_out = entry_short;
    bool short_out = entry_long;

    # Hedging allowed (simultaneous long and short positions for a pair)
    exit_orders.close_buy_orders(symbol, long_out, 0, PERIOD_CURRENT, 42);
    exit_orders.close_sell_orders(symbol, short_out, 0, PERIOD_CURRENT, 42);
    entry_orders.open_buy_orders(symbol, long_in, PERIOD_CURRENT, sl_mode, inp_sl_var, tp_mode, inp_tp_var, lot_mode, inp_lot_var, 42);
    entry_orders.open_sell_orders(symbol, short_in, PERIOD_CURRENT, sl_mode, inp_sl_var, tp_mode, inp_tp_var, lot_mode, inp_lot_var, 42);
}

void test_entry_signal(int indi_handle, bool &enter_long, bool &enter_short){

    {% for buf in buffers %}
    double {{ buf.name }}[];
    ArraySetAsSeries({{ buf.name }}, true);
    CopyBuffer(indi_handle, {{ buf.index }}, 1, 10, {{ buf.name }});

    {% endfor %}
    enter_long  = ({{ long_conditions }});
    enter_short = ({{ short_conditions }});
}
